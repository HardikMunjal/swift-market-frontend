git init                      it will create .git folder in your project
git config --list             
git branch
git status
git add .  or   git add filename
git commit -m 'commit message'
git remote add origin https://github.com/HardikMunjal/swift-market-frontend.git
git push -u origin master


git reset- This will 'unstage' all the files you've added after your last commit.


//if you added some files to <git add> 
//If you want to unstage only some files, use git reset -- <file 1> <file 2> <file n>
git reset  -- public/script.js






// suppose i have committed bad changes

git reset --hard HEAD~1       This will undo my latest commit and remove all those changes

git reset --soft HEAD~1       This will undo my latest commit but will not remove all those changes,, now u can edit changes then do git add and git commit

One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all? Tough luck, right?

git reflog  :- Nope, there's still a way to get it back. Type git reflog and you'll see a list of (partial) commit shas that you've moved around in. Find the commit you destroyed, and do this:

git checkout -b someNewBranchName shaYouDestroyed
You've now resurrected that commit. Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of.



git revert   This command creates a new commit that undoes the changes from a previous commit. This command adds new history to the project (it doesn't modify existing history).



